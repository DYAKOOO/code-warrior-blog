---
import Layout from '../../layouts/Layout.astro';
import BlogPost from '../../layouts/BlogPost.astro';
import SearchBar from '../../components/SearchBar.astro';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('blog');
const categories = [...new Set(allPosts.map(post => post.data.category))];
const tags = [...new Set(allPosts.flatMap(post => post.data.tags))];
---

<Layout title="Blog">
  <div class="max-w-4xl mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Blog</h1>
    
    <div class="bg-white shadow-md rounded-lg p-6 mb-8">
      <SearchBar />
      <div class="flex flex-col sm:flex-row gap-4 mt-4">
        <select id="categoryFilter" class="w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          <option value="">All Categories</option>
          {categories.map(category => (
            <option value={category}>{category}</option>
          ))}
        </select>
        <select id="tagFilter" class="w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          <option value="">All Tags</option>
          {tags.map(tag => (
            <option value={tag}>{tag}</option>
          ))}
        </select>
      </div>
      <div id="active-filters" class="mt-4 flex flex-wrap gap-2"></div>
      <button id="clear-filters" class="mt-4 px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition duration-300 hidden">Clear Filters</button>
    </div>

    <div id="posts-count" class="mb-4 text-gray-600"></div>

    <div id="blogPosts" class="grid gap-8 md:grid-cols-2">
      {allPosts.map((post) => <BlogPost post={post} />)}
    </div>
  </div>

  <script>
    const categoryFilter = document.getElementById('categoryFilter');
    const tagFilter = document.getElementById('tagFilter');
    const blogPosts = document.querySelectorAll('.blog-post');
    const activeFilters = document.getElementById('active-filters');
    const clearFiltersBtn = document.getElementById('clear-filters');
    const postsCount = document.getElementById('posts-count');

    let currentFilters = {
      category: '',
      tag: ''
    };

    function filterPosts() {
      let visiblePosts = 0;

      blogPosts.forEach(post => {
        const category = post.dataset.category;
        const tags = post.dataset.tags.split(',');

        const matchesCategory = currentFilters.category === '' || category === currentFilters.category;
        const matchesTag = currentFilters.tag === '' || tags.includes(currentFilters.tag);

        const isVisible = matchesCategory && matchesTag;
        post.style.display = isVisible ? 'block' : 'none';
        if (isVisible) visiblePosts++;
      });

      updateActiveFilters();
      updatePostsCount(visiblePosts);
    }

    function updateActiveFilters() {
      activeFilters.innerHTML = '';
      clearFiltersBtn.classList.add('hidden');

      if (currentFilters.category) {
        addFilterPill('category', currentFilters.category);
      }
      if (currentFilters.tag) {
        addFilterPill('tag', currentFilters.tag);
      }

      if (currentFilters.category || currentFilters.tag) {
        clearFiltersBtn.classList.remove('hidden');
      }
    }

    function addFilterPill(type, value) {
      const pill = document.createElement('span');
      pill.className = 'bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm';
      pill.textContent = `${type}: ${value}`;
      
      const removeBtn = document.createElement('button');
      removeBtn.className = 'ml-1 text-blue-800 hover:text-blue-900';
      removeBtn.textContent = 'Ã—';
      removeBtn.addEventListener('click', () => {
        currentFilters[type] = '';
        if (type === 'category') categoryFilter.value = '';
        if (type === 'tag') tagFilter.value = '';
        filterPosts();
      });

      pill.appendChild(removeBtn);
      activeFilters.appendChild(pill);
    }

    function updatePostsCount(count) {
      postsCount.textContent = `Showing ${count} post${count !== 1 ? 's' : ''}`;
      postsCount.style.display = 'block';
    }

    categoryFilter.addEventListener('change', () => {
      currentFilters.category = categoryFilter.value;
      filterPosts();
    });

    tagFilter.addEventListener('change', () => {
      currentFilters.tag = tagFilter.value;
      filterPosts();
    });

    clearFiltersBtn.addEventListener('click', () => {
      currentFilters = { category: '', tag: '' };
      categoryFilter.value = '';
      tagFilter.value = '';
      filterPosts();
    });

    // Initial filter
    filterPosts();
  </script>
</Layout>

<style>
  @media (max-width: 768px) {
    #blogPosts {
      grid-template-columns: 1fr;
    }
  }
</style>