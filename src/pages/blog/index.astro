---
import Layout from '../../layouts/Layout.astro';
import BlogPost from '../../layouts/BlogPost.astro';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('blog');
const categories = [...new Set(allPosts.map(post => post.data.category))];
const tags = [...new Set(allPosts.flatMap(post => post.data.tags))];
---

<Layout title="Blog">
  <div class="max-w-4xl mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Blog</h1>
    
    <div class="bg-white shadow-md rounded-lg p-6 mb-8">
      <div class="flex flex-col md:flex-row gap-4">
        <div class="flex-grow relative">
          <input 
            type="text" 
            id="search-input" 
            placeholder="Search posts..." 
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <div id="search-results" class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg hidden"></div>
        </div>
        <div class="flex gap-4">
          <select id="categoryFilter" class="px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">All Categories</option>
            {categories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
          <select id="tagFilter" class="px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">All Tags</option>
            {tags.map(tag => (
              <option value={tag}>{tag}</option>
            ))}
          </select>
        </div>
      </div>
    </div>

    <div id="blogPosts" class="grid gap-8 md:grid-cols-2">
      {allPosts.map((post) => <BlogPost post={post} />)}
    </div>
  </div>

  <script>
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const categoryFilter = document.getElementById('categoryFilter');
    const tagFilter = document.getElementById('tagFilter');
    const blogPosts = document.querySelectorAll('.blog-post');

    function filterPosts() {
      const searchTerm = searchInput.value.toLowerCase();
      const selectedCategory = categoryFilter.value;
      const selectedTag = tagFilter.value;

      blogPosts.forEach(post => {
        const title = post.querySelector('h2').textContent.toLowerCase();
        const category = post.dataset.category;
        const tags = post.dataset.tags.split(',');

        const matchesSearch = title.includes(searchTerm);
        const matchesCategory = selectedCategory === '' || category === selectedCategory;
        const matchesTag = selectedTag === '' || tags.includes(selectedTag);

        post.style.display = matchesSearch && matchesCategory && matchesTag ? 'block' : 'none';
      });
    }

    function updateSearchDropdown() {
      const searchTerm = searchInput.value.toLowerCase();
      if (searchTerm.length < 2) {
        searchResults.innerHTML = '';
        searchResults.classList.add('hidden');
        return;
      }

      const matchingPosts = Array.from(blogPosts).filter(post => 
        post.querySelector('h2').textContent.toLowerCase().includes(searchTerm)
      );

      if (matchingPosts.length > 0) {
        searchResults.innerHTML = matchingPosts.map(post => `
          <div class="p-2 hover:bg-gray-100 cursor-pointer">
            ${post.querySelector('h2').textContent}
          </div>
        `).join('');
        searchResults.classList.remove('hidden');
      } else {
        searchResults.innerHTML = '<div class="p-2">No results found</div>';
        searchResults.classList.remove('hidden');
      }
    }

    searchInput.addEventListener('input', () => {
      updateSearchDropdown();
      filterPosts();
    });

    searchResults.addEventListener('click', (e) => {
      if (e.target.textContent !== 'No results found') {
        searchInput.value = e.target.textContent;
        searchResults.classList.add('hidden');
        filterPosts();
      }
    });

    document.addEventListener('click', (e) => {
      if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
        searchResults.classList.add('hidden');
      }
    });

    categoryFilter.addEventListener('change', filterPosts);
    tagFilter.addEventListener('change', filterPosts);

    // Initial filter
    filterPosts();
  </script>
</Layout>

<style>
  @media (max-width: 768px) {
    #blogPosts {
      grid-template-columns: 1fr;
    }
  }
</style>