---
import Layout from '../../../layouts/Layout.astro';
import BlogPost from '../../../layouts/BlogPost.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const uniqueCategories = [...new Set(allPosts.map((post) => post.data.category))];

  return uniqueCategories.map((category) => {
    const filteredPosts = allPosts.filter((post) => post.data.category === category);
    return {
      params: { category },
      props: { posts: filteredPosts },
    };
  });
}

const { category } = Astro.params;
const { posts } = Astro.props;
const tags = [...new Set(posts.flatMap(post => post.data.tags))];
---

<Layout title={`${category} | Neural Diwan`}>
  <div class="max-w-4xl mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-8">{category}</h1>
    
    <div class="bg-white shadow-md rounded-lg p-6 mb-8">
      <div class="flex flex-col md:flex-row gap-4">
        <div class="flex-grow relative">
          <input 
            type="text" 
            id="search-input" 
            placeholder="Search posts..." 
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        <div class="flex-shrink-0">
          <select id="tagFilter" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">All Tags</option>
            {tags.map(tag => (
              <option value={tag}>{tag}</option>
            ))}
          </select>
        </div>
      </div>
      <div id="active-filters" class="mt-4 flex flex-wrap gap-2"></div>
      <button id="clear-filters" class="mt-4 px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition duration-300 hidden">Clear Filters</button>
    </div>

    <div id="posts-count" class="mb-4 text-gray-600"></div>

    <div id="blogPosts" class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {posts.map((post) => <BlogPost post={post} />)}
    </div>
  </div>

  <script define:vars={{ posts }}>
    const searchInput = document.getElementById('search-input');
    const tagFilter = document.getElementById('tagFilter');
    const blogPostsContainer = document.getElementById('blogPosts');
    const activeFilters = document.getElementById('active-filters');
    const clearFiltersBtn = document.getElementById('clear-filters');
    const postsCount = document.getElementById('posts-count');

    let currentFilters = {
      search: '',
      tag: ''
    };

    function filterPosts() {
      const filteredPosts = posts.filter(post => {
        const matchesSearch = post.data.title.toLowerCase().includes(currentFilters.search.toLowerCase()) ||
                              post.data.description.toLowerCase().includes(currentFilters.search.toLowerCase());
        const matchesTag = currentFilters.tag === '' || post.data.tags.includes(currentFilters.tag);

        return matchesSearch && matchesTag;
      });

      updateActiveFilters();
      updatePostsCount(filteredPosts.length);
      renderPosts(filteredPosts);
    }

    function renderPosts(posts) {
      blogPostsContainer.innerHTML = posts.map(post => `
        <article class="blog-post card hover:shadow-lg transition-all duration-300" data-slug="${post.slug}" data-tags="${post.data.tags.join(',')}">
          <a href="/blog/${post.slug}/" class="block">
            ${post.data.heroImage ? `<img src="${post.data.heroImage}" alt="" class="w-full h-48 object-cover rounded-t-lg">` : ''}
            <div class="p-4">
              <h2 class="text-xl font-semibold text-primary mb-2 line-clamp-2">${post.data.title}</h2>
              <p class="text-sm text-gray-500">${new Date(post.data.pubDate).toLocaleDateString()}</p>
              ${post.data.description ? `<p class="text-text-secondary mt-2 text-sm line-clamp-3">${post.data.description}</p>` : ''}
              ${post.data.tags && post.data.tags.length > 0 ? `
                <div class="mt-4 flex flex-wrap gap-2">
                  ${post.data.tags.map(tag => `
                    <span class="tag bg-gray-100 text-text-secondary px-2 py-1 rounded-full text-xs whitespace-nowrap" data-tag="${tag}">${tag}</span>
                  `).join('')}
                </div>
              ` : ''}
            </div>
          </a>
        </article>
      `).join('');

      updateTagAppearance();
    }

    function updateTagAppearance() {
      const allTags = document.querySelectorAll('.tag');
      allTags.forEach(tag => {
        if (currentFilters.tag && currentFilters.tag !== tag.dataset.tag) {
          tag.classList.add('opacity-50');
        } else {
          tag.classList.remove('opacity-50');
        }
      });
    }

    function updateActiveFilters() {
      activeFilters.innerHTML = '';
      clearFiltersBtn.classList.add('hidden');

      if (currentFilters.search) {
        addFilterPill('search', currentFilters.search);
      }
      if (currentFilters.tag) {
        addFilterPill('tag', currentFilters.tag);
      }

      if (currentFilters.search || currentFilters.tag) {
        clearFiltersBtn.classList.remove('hidden');
      }
    }

    function addFilterPill(type, value) {
      const pill = document.createElement('span');
      pill.className = 'bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm';
      pill.textContent = `${type}: ${value}`;
      
      const removeBtn = document.createElement('button');
      removeBtn.className = 'ml-1 text-blue-800 hover:text-blue-900';
      removeBtn.textContent = 'Ã—';
      removeBtn.addEventListener('click', () => {
        currentFilters[type] = '';
        if (type === 'search') searchInput.value = '';
        if (type === 'tag') tagFilter.value = '';
        filterPosts();
      });

      pill.appendChild(removeBtn);
      activeFilters.appendChild(pill);
    }

    function updatePostsCount(count) {
      postsCount.textContent = `Showing ${count} post${count !== 1 ? 's' : ''}`;
    }

    function clearAllFilters() {
      currentFilters = { search: '', tag: '' };
      searchInput.value = '';
      tagFilter.value = '';
      filterPosts();
    }

    searchInput.addEventListener('input', () => {
      currentFilters.search = searchInput.value;
      filterPosts();
    });

    tagFilter.addEventListener('change', () => {
      currentFilters.tag = tagFilter.value;
      filterPosts();
    });

    clearFiltersBtn.addEventListener('click', clearAllFilters);

    // Clear filters on page load
    window.addEventListener('load', clearAllFilters);

    // Initial filter
    filterPosts();
  </script>
</Layout>