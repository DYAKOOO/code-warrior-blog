---
interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<svg
  class={className}
  viewBox="0 0 200 150"
  xmlns="http://www.w3.org/2000/svg"
>
  <defs>
    <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#001F3F" />
      <stop offset="100%" style="stop-color:#0074D9" />
    </linearGradient>
  </defs>
  
  <!-- Background -->
  <rect width="200" height="200" fill="url(#bg-gradient)" />
  
  <!-- Neural network nodes -->
  <g fill="#90EE90">
    <!-- Input layer -->
    <circle cx="40" cy="40" r="6" />
    <circle cx="40" cy="80" r="6" />
    <circle cx="40" cy="120" r="6" />
    <circle cx="40" cy="160" r="6" />
    
    <!-- Hidden layer 1 -->
    <circle cx="100" cy="30" r="6" />
    <circle cx="100" cy="70" r="6" />
    <circle cx="100" cy="110" r="6" />
    <circle cx="100" cy="150" r="6" />
    <circle cx="100" cy="190" r="6" />
    
    <!-- Output layer -->
    <circle cx="160" cy="40" r="6" />
    <circle cx="160" cy="80" r="6" />
    <circle cx="160" cy="120" r="6" />
    <circle cx="160" cy="160" r="6" />
  </g>
  
  <!-- Connections -->
  <g stroke="#FFFFFF" stroke-width="0.5" opacity="0.6">
    <!-- Connect input to hidden layer -->
    {Array.from({ length: 4 }).map((_, i) => 
      Array.from({ length: 5 }).map((_, j) => (
        <line 
          x1="40" 
          y1={40 + i * 40} 
          x2="100" 
          y2={30 + j * 40}
        />
      ))
    )}
    
    <!-- Connect hidden to output layer -->
    {Array.from({ length: 5 }).map((_, i) => 
      Array.from({ length: 4 }).map((_, j) => (
        <line 
          x1="100" 
          y1={30 + i * 40} 
          x2="160" 
          y2={40 + j * 40}
        />
      ))
    )}
  </g>
</svg>